import pytest 
from transformers import TFAutoModelForSeq2SeqLM
from transformers import AutoTokenizer
import numpy as np
import tensorflow as tf 
import pandas as pd
from dotenv import load_dotenv
import os
from unittest.mock import patch
import sys 
sys.path.append('../devia_C12-13')
from preprocess import *
import json
# passing tests parameters as env variable , could be with  sys.argv to pass it as command however it would conflict with pytest test launching
load_dotenv()

dataset_ok = json.load(open("tests/test_datasets/dataset_ok.json"))

TEST_MODEL_CHECKPOINT = "model"
TEST_TOKENIZER_CHECKPOINT = "tokenizer"
TEST_CSV_PATH = f"tests/test_datasets/{dataset_ok['name']}.csv"
TEST_QUOTECHAR = dataset_ok['quotechar']
TEST_COL_SOURCE = dataset_ok['col_origin']
TEST_COL_TARGET = dataset_ok['col_target']
TEST_MODEL_VERSION = dataset_ok
TEST_EPOCHS = 1


@pytest.fixture(scope="session")
def csv_dict_path():
  return {"test":TEST_CSV_PATH}

@pytest.fixture(scope="session")
def epochs():
  return TEST_EPOCHS


@pytest.fixture(scope="function")
def sample_text():
  return "Gościu, czy możemy wyjść bez pożegnania?"

@pytest.fixture(scope="session")
def col_origin_target():
    return TEST_COL_SOURCE, TEST_COL_TARGET

@pytest.fixture(scope="session")
def quotechar():
    return TEST_QUOTECHAR

@pytest.fixture(scope="session")
def model_and_tokenizer_checkpoint():
    return TEST_MODEL_CHECKPOINT, TEST_TOKENIZER_CHECKPOINT

@pytest.fixture(scope="session")  # Download model and tokenizer once for all tests
def model_and_tokenizer():

    tokenizer = AutoTokenizer.from_pretrained(TEST_TOKENIZER_CHECKPOINT)
    model = TFAutoModelForSeq2SeqLM.from_pretrained(TEST_MODEL_CHECKPOINT)
    return tokenizer, model


@pytest.fixture(scope="session")
def sample_dataframe():
    """Fixture to create a sample DataFrame for testing."""
    data = {0: ['Bonjour', 'Hola', None], 1: ['Hello', 'Hi', 'Ciao']}
    return pd.DataFrame(data)

@pytest.fixture(scope="session")
def mock_train_test_split():
    """Fixture to mock train_test_split for testing pd_to_hf_dataset."""
    with patch('sklearn.model_selection.train_test_split') as mock_split:
        mock_split.return_value = ([1, 2, 3], [4, 5, 6]), ([1, 2], [4, 5])
        yield mock_split

@pytest.fixture(scope="session")
def cleaned_df(col_origin_target, quotechar):
    
    col_o, col_t = col_origin_target

    test_df = pd.read_csv(TEST_CSV_PATH, quotechar=quotechar, header=None)
    
    cleaned_test = format_pandas_df(test_df,col_o,col_t)


    return cleaned_test

@pytest.fixture(scope="session")
def hf_ds(cleaned_df):
    return pd_to_hf_dataset(cleaned_df)

@pytest.fixture(scope="session")
def tokened_ds(hf_ds, model_and_tokenizer_checkpoint, col_origin_target):
    ds = to_datasetdict({"train":hf_ds,"valid":hf_ds,"test":hf_ds})
    col_o, col_t = col_origin_target
    _ , tokenizer_chkpt = model_and_tokenizer_checkpoint
    return tokenize_hf_ds(ds,tokenizer_chkpt, col_o,col_t)

@pytest.fixture(scope="session")
def processed_ds(tokened_ds, model_and_tokenizer_checkpoint):
    tokenizer, ds_tokenized  = tokened_ds
    model_path , _ = model_and_tokenizer_checkpoint
    return to_tf_dataset(ds_tokenized, tokenizer=tokenizer,model_checkpoint=model_path)

@pytest.fixture(scope="session")  # Provide sample data for each test
def test_data():
    """
    Pavé César 
    """
    return  [({'attention_mask':tf.constant(
        np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 0, 0, 0, 0]]
    )),
  'input_ids': tf.constant(np. array([[37789,   219,    64,    18, 29534,  2638,    74,    18,  6707,
        23082,     0, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   81,     4, 14582,     3,   171,    62,   269,     3, 24998,
           17,     4,  2571,     7,  3863,     2,     0, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [  101,    92,  1993,    44, 11191,    58,  1925,  1830,  7396,
           14,     2,     0, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   46,  2825,   474,     3,    13,  2697,  1594,     5,     9,
            4, 32955,    11,     5,     7,  2728,     2,     0, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [  494, 12891,    22,   413,    34,    26,   682,  2002,   154,
           18, 37767,    47,    74,   307,   403,    15,     0, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [  101,  1806,    30,  9401,    22, 12399,    28,   160,  7520,
           58,  1219,  3650,  8633,  5110,   313,     0, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [ 3884,    14,  8635,     3,  2955,    41, 15483,     5,   192,
        10549,     2,     0, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   83,    44,   845,   311,     3,    26,     9,     4,  6757,
           11,     7,  3173,   475,    62,  2176,    17,     4,  7140,
          780,    17,     4,  2082,  1387,     2,     0, 60049, 60049,
        60049, 60049, 60049],
       [  329,     4,  1146,    22,   319,    34,   374,   841,  1088,
        14210,    28,  5072,  4994, 14626,  1417, 25853,    14,    33,
            0, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [  306,   192, 28723,     3,    60,    62, 11365,    37,  3001,
         4547,    12,    62,     3,    18,  1472,     2,     0, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [ 1719,   168,   269,    18,  4595, 52137,   166,    14,     5,
        16974,  4548,  1063,    27,    30, 12511,     5,  5376,     2,
            0, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   87,   617,   414,   445,    11,   270,  4763,    92,     5,
          804,   187,   160,   323,     0, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [ 2604,    65,     1,    20,   160,  7105,    43,    13,    49,
        11466,  3160,     0, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [13801,    12,   165,    35, 12519,  1549,  7505,     0, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   83,    44,  5050,    13,  1284,  4279,    10, 18930,  7774,
        24264, 11447,  6329,  7634,  9935,  9676, 10777,  6329, 12528,
        18930, 38710, 14777,  6245,     2,     0, 60049, 60049, 60049,
        60049, 60049, 60049],
       [  441,  1099,     3,    62,   973,   318,    40,    50,   292,
          455,  1746,  8664,   315,   186,   627,    12,  8850,   213,
            0, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [25671,     3,    10,     1,   167,  4976,    11,     7,  1669,
          131,   103, 22046,  5019,    22,   319,     2,     0, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   41, 21303,  2199,     5,   158,  2268,     7,  9500,   268,
          607,   166,    11,   182, 28988,  7443,     2,     0, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   10,     1,  3932,    18, 18172,    14, 20485,    11,  1435,
          187,   551,    47,    10, 15129,    27,     0, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [ 6297,     7,  4877,     5,   371,  3886,     3,     0, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [  101,    46,  1701,    44,    10,     1,  3132,  1497,    22,
        31893,    20,    10,     1,   313,     0, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   10,     1, 12009,     3,  1821,    49,  3438,  3779,     3,
          192,  5291,    44, 14836,     2,     0, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [13163,    74, 40143,     8,    87,     4,    39,   505,  2299,
           77,     0, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   10,  1343,  3794,   122,    44, 35630,     3,     7, 13563,
           11,     7,  1303,    43,   214,   119,   353,    40,  1552,
         2857,    11,    17,     4,  7140,    66,  1782,    17,     4,
         1785,     2,     0],
       [  236,   218, 10307,   311,    26,     7, 26147,     5, 41620,
          288,  1478,     5,   123,    22,  8140,     2,     0, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [    7,   465,  1375,   108, 21243,     5,  4333,  2017,     3,
         8100,    31,  2447,  1339,    84,     0, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [24267,    10,    40,   101,  6350,    26,   123,    10, 15176,
          336,     0, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   10,     1,   145,    65,     1,   955,   102,    34,     7,
         2129,    10,    40,   270,   785,    12, 36464, 54873, 19781,
           10,     1,     0, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [  124,   804, 32366,    20,  8333,  4001,  1548,   244,  3886,
            2,     0, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   41,   746,    26,    13, 11769,  6780,   547,   372,   171,
          773,  3583,     2,     0, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [ 6164, 14728,    40,   513,   180,   466,  5488,    47,  4392,
            0, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049, 60049,
        60049, 60049, 60049],
       [   95,  1525,   279,  1987,   147,    10,     1,     3,   109,
         5898,     5,     9,     4, 17316,     3,   188,   109,   309,
           47,   403,   309,    37,  1005, 15456,    84,     0, 60049,
        60049, 60049, 60049]]))},
 tf.constant(np.array([[31944,   238,   219,   586,  2232, 48305,    91, 34810, 11687,
            0,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [  146,  2961,    76,   185,     3,   114,   197,  1528,     3,
         5818,  4706, 12543,     2,     0,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [22730,    35,    52, 36471,    35,   120,  1925,  1830,    89,
         1963,     2,     0,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [12209,  9750,   816,    51, 45237,    16,    51, 17380,     2,
            0,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 7900,  1946,    29, 22110,     3,    48,  1367,   526,   162,
        37550, 26056,   947,    91,  1119,  1845,    15,     0,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 9764,    20,    49,  4314,  4331,   365,  1382,  1438, 15654,
          120,  6338,  2094, 37594,  5110,   313,     0,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [  285,   299, 22692,    72,     3,   114,   424,  6862,    76,
           19,  1481,   163, 19709,     2,     0,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 5104,    98,    52,   408,     3,    48, 24628,    20,    16,
        28903,   206,  6188,  1009,  9628,   997,    19,   827,     2,
            0,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 7900,    29,  9803,  1096,     3,   114,  2139,  9338,  9343,
        25319,     3, 24302, 22187,   224,    15,     0,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [  146,   390,  6526,   606, 16848,   610, 16830, 19620,    25,
         1108,     3,  3698,     2,     0,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [  195,  3122,   661,    55,   770, 16300,  3546,  5099,    14,
           10,  6128,  4548,  1063,    27,    19, 30965,    20,  5880,
            2,     0,  -100,  -100,  -100,  -100,  -100],
       [   87,   617,   414,   445,   136,   270,  4763,   564,   865,
         1103,   696,     0,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 2767,    29,  1058,  4025,   229,     6,    49, 11466,  3160,
            0,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [  853,   217,  5548,    25,  2821, 12519,  1549,  7505,     0,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 2449,   176,    24,   154,  8208, 20525,    10, 18930,  7774,
        24264, 11447,  6329,  7634,  9935,  9676, 10777,  6329, 12528,
        18930, 38710, 14777, 14444,     2,     0,  -100],
       [  536,   173,    23,  1394,   862,    40,    10,     1,   716,
           20,  1746,  8664,   315,    60,   502,   476,    25, 15201,
           69,     1,     2,     0,  -100,  -100,  -100],
       [   78,  1842,    29,   975,    16, 17101, 10184,   446,    24,
         1053,   184,     2,     0,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [13872,   163,    19,  4523,  2668,  5913,    45,  5480,  6578,
        19911,   166,    16,   278, 32188,    76, 12352,   946,     2,
            0,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 2266, 19694,    27, 13673,   215,    16,  9331,  4956,    51,
           55,   861,   102,  1324,     0,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [12901,  5912,  4043,   473, 10126,   356,    10,    84,     0,
         -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [   56,   975,    52,  1969,  4973,  5309,    10,     1,   412,
        36417,    84, 17101,    52,   234,   284,  3237,  1270,  9665,
         1969,    10,     1,    73,  6011,     2,     0],
       [    8,  1979,  3379,   606,     3,  1601,    49,  3438,  3779,
            3,   235, 12709,    52,   235,  9364,     2,     0,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [  297,   692,    91,  6374, 20009,    10,     1,    52,  1056,
         8238,    53,     0,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [   10,  1343,   110,   167,    52,  3325,  7692,     3, 31104,
           16,  2694,     6,  1832,    40,  1884, 11775,   229,    16,
         5424,   163,  1954,   930,     2,     0,  -100],
       [  262,   900,   408,     3,   333,  1096,    10,  3153,  2206,
            3,    48,    86,  7082, 36747,   708, 28779,    86,   435,
         6088,     2,     0,  -100,  -100,  -100,  -100],
       [ 4605,    51,    67,   414,   173, 30840,    45, 35113,     6,
        23880,  1339,   526,    84,     0,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [12473,  8903,    40, 11085,   885,     3,  1593,   375, 13629,
          104,     0,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [   10,     1,  1979,  1045,   173,  8454,    40,  4081,  1060,
            6,  2735,  3868,   144,  1346,     1,     0,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 9722,  9625,  4659, 52465,  7943,     3,    10, 23128,  7533,
        18554,   113, 19992, 18179, 28927,  2617,    97,   258, 10517,
          190, 14476,     0,  -100,  -100,  -100,  -100],
       [15048,     3,    48, 14359,   945,   355,     6,  1954,   773,
         3583,     2,     0,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [ 6164,   130,   315,   833,    40,   276,  1208,  7703,   573,
         6967,     0,  -100,  -100,  -100,  -100,  -100,  -100,  -100,
         -100,  -100,  -100,  -100,  -100,  -100,  -100],
       [  349,   833,   279, 16010,    10,     1,     3,    48,  9301,
           19,    70,   104,     3,   202,  2899,   387, 19700,  5682,
           84,     0,  -100,  -100,  -100,  -100,  -100]])))]
